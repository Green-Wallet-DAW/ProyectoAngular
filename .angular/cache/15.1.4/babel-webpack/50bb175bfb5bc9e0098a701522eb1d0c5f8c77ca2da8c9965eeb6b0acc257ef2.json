{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { matchValidator } from './form-validator';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authService, router, toastr) {\n    this.authService = authService;\n    this.router = router;\n    this.toastr = toastr;\n    // form: any = {\n    //   name: null,\n    //   email: '',\n    //   password: null,\n    //   phone_number: null,\n    //   cumn: null,\n    //   newsletter: true,\n    //   cpassword: ['', [\n    //     Validators.required,\n    //     matchValidator('password')\n    //   ]],\n    //   // news: null,\n    // };\n    this.form = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(40)]),\n      email: new FormControl('', [Validators.required, Validators.maxLength(100)]),\n      phone_number: new FormControl('', [Validators.required]),\n      cumn: new FormControl(''),\n      newsletter: new FormControl(true, [Validators.required]),\n      password: new FormControl('', [Validators.required, Validators.minLength(10), matchValidator('cpassword', true)]),\n      cpassword: new FormControl('', [Validators.required, Validators.minLength(10), matchValidator('password')])\n    });\n    this.isSuccessful = false;\n    this.isSignUpFailed = false;\n    this.errorMessage = '';\n  }\n  ngOnInit() {}\n  onSubmit() {\n    // console.log(this.form);\n    if (this.form.valid) {\n      this.authService.register(this.form.value.name, this.form.value.email, this.form.value.password, this.form.value.phone_number, this.form.value.cumn, this.form.value.newsletter).subscribe(data => {\n        // console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n        this.toastr.success('Your information has been registered successfully!', 'Account created', {\n          positionClass: 'toast-bottom-right',\n          timeOut: 2000\n        });\n        setTimeout(() => {\n          this.router.navigate(['/login']);\n        }, 50);\n      }, error => {\n        if (error instanceof ErrorEvent) {\n          this.errorMessage = error.error.message;\n        } else {\n          this.errorMessage = \"Error status: \" + error.status;\n        }\n        this.isSignUpFailed = true;\n      });\n    } else {\n      this.toastr.error(\"The form did not validated correctly\", 'ERROR CREATING ACCOUNT', {\n        positionClass: 'toast-bottom-right'\n      });\n    }\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","matchValidator","RegisterComponent","constructor","authService","router","toastr","name","required","minLength","maxLength","email","phone_number","cumn","newsletter","password","cpassword","ngOnInit","onSubmit","form","valid","register","value","subscribe","data","isSuccessful","isSignUpFailed","success","positionClass","timeOut","setTimeout","navigate","error","ErrorEvent","errorMessage","message","status","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/alumno/Escritorio/GreenWallet/ProyectoAngular/src/app/register/register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../_services/auth.service';\nimport { matchValidator } from './form-validator';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  // form: any = {\n  //   name: null,\n  //   email: '',\n  //   password: null,\n  //   phone_number: null,\n  //   cumn: null,\n  //   newsletter: true,\n  //   cpassword: ['', [\n  //     Validators.required,\n  //     matchValidator('password')\n  //   ]],\n  //   // news: null,\n  // };\n  form = new FormGroup({\n    name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(40)]),\n    email: new FormControl('', [Validators.required, Validators.maxLength(100)]),\n    phone_number: new FormControl('', [Validators.required]),\n    cumn: new FormControl(''),\n    newsletter: new FormControl(true, [Validators.required]),\n    password: new FormControl('', [Validators.required, Validators.minLength(10), matchValidator('cpassword', true)]),\n    cpassword: new FormControl('', [Validators.required, Validators.minLength(10), matchValidator('password')]),\n  });\n\n\n\n\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private authService: AuthService, private router: Router, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n  }\n\n  onSubmit(): void {\n    // console.log(this.form);\n    if(this.form.valid){\n      this.authService.register(this.form.value.name!, this.form.value.email!, this.form.value.password!, this.form.value.phone_number!, this.form.value.cumn!, this.form.value.newsletter!).subscribe(\n        data => {\n          // console.log(data);\n          this.isSuccessful = true;\n          this.isSignUpFailed = false;\n          this.toastr.success('Your information has been registered successfully!', 'Account created', {positionClass: 'toast-bottom-right', timeOut:2000});\n            setTimeout(() => {\n              this.router.navigate(['/login']);\n            }, 50);\n        },\n        error => {\n          if(error instanceof ErrorEvent){\n            this.errorMessage = error.error.message;\n          }else{\n            this.errorMessage = \"Error status: \" + error.status;\n          }\n          this.isSignUpFailed = true;\n        }\n      );\n    }else{\n      this.toastr.error(\"The form did not validated correctly\", 'ERROR CREATING ACCOUNT', {positionClass: 'toast-bottom-right'});\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}