// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import { Injectable, RendererStyleFlags2 } from '@angular/core';
import { ɵDomRendererFactory2 } from '@angular/platform-browser';
import { Disguise } from './components/Disguise';
import { ReactContent } from './react-content';
import { isReactNode, ReactNode } from './react-node';
import { registerElement } from './registry';
import './geteventlisteners';
import { isAngularReactComponent } from '../utils/angular-react/metadata';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
const DEBUG = false;
export class AngularReactRendererFactory extends ɵDomRendererFactory2 {
    constructor(eventManager, sharedStylesHost) {
        super(eventManager, sharedStylesHost, 'app-id');
        // Collection of ReactNodes that can be evaluated and flushed at the
        // end of Render.  This is necessary as the flow of element creation
        // and update goes from "create" > "insert" > "update" property/attribute.
        // React elements cannot be "inserted" and later have their props
        // updated, so the "insert", or React.Render, can only be done once the
        // element has been fully defined.  Only the topmost [root] nodes are added here.
        this.reactRootNodes = new Set();
        // This flag can only be set to true from outside.  It can only be reset
        // to false from inside.  This value is reset on "end" when the pending
        // renders are flushed.
        this.setRenderPendingCallback = () => {
            this.isRenderPending = true;
        };
        // tslint:disable-next-line: no-use-before-declare
        this.defaultReactRenderer = new ReactRenderer(this);
    }
    createRenderer(element, type) {
        if (type.styles?.[0] === 'react-renderer' || isAngularReactComponent(type)) {
            return this.defaultReactRenderer;
        }
        return super.createRenderer(element, type);
    }
    begin() { }
    end() {
        if (DEBUG) {
            console.log('RootRenderer > end > isRenderPending:', this.isRenderPending, 'reactRootNodes:', this.reactRootNodes);
        }
        // Flush any pending React element render updates.  This cannot be done
        // earlier (as is done for DOM elements) because React element props
        // are ReadOnly.
        if (this.isRenderPending) {
            // Remove root nodes that are pending destroy after render.
            this.reactRootNodes = new Set(Array.from(this.reactRootNodes).filter(node => !node.render().destroyPending));
            this.isRenderPending = false;
        }
    }
}
/** @nocollapse */ AngularReactRendererFactory.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: AngularReactRendererFactory, deps: [{ token: i1.EventManager }, { token: i1.ɵDomSharedStylesHost }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ AngularReactRendererFactory.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: AngularReactRendererFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.1", ngImport: i0, type: AngularReactRendererFactory, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.EventManager }, { type: i1.ɵDomSharedStylesHost }]; } });
export const isReactRendererData = (data) => data && typeof data.addRootNode === 'function';
export class ReactRenderer {
    constructor(rootRenderer) {
        this.rootRenderer = rootRenderer;
        this.data = {
            addRootNode: (node) => {
                this.rootRenderer.reactRootNodes.add(node);
            },
        };
        // These two elements are essential for the whole experience to be smooth for the user - register them from the get-go.
        registerElement('ReactContent', () => ReactContent);
        registerElement('Disguise', () => Disguise);
    }
    destroy() { }
    destroyNode(node) {
        if (DEBUG) {
            console.error('Renderer > destroyNode > node:', node.toString());
        }
        node.destroyNode();
    }
    createElement(name, namespace) {
        if (DEBUG) {
            console.error('Renderer > createElement > name:', name, namespace ? 'namespace:' : '', namespace);
        }
        return new ReactNode(name);
    }
    createComment(value) {
        if (DEBUG) {
            console.error('Renderer > createComment > value:', value.trim());
        }
        return new ReactNode().asComment(value);
    }
    createText(value) {
        if (DEBUG) {
            console.error('Renderer > createText > value:', value.trim());
        }
        return new ReactNode().asText(value);
    }
    appendChild(parent, node) {
        // Only append a child if there is a child to append.
        if (!node) {
            return;
        }
        if (node instanceof Node) {
            if (DEBUG) {
                console.warn('Renderer > appendChild > asNode > parent:', parent.toString(), 'node:', node.toString());
            }
            parent.appendChild(node);
            return;
        }
        // Don't append empty text nodes.
        if (!node.shouldRender) {
            return;
        }
        // Provide a parent element reference to the ReactNode.  This will be used later
        // once the ReactNode is fully defined and it is subsequently rendered.
        if (!isReactNode(parent)) {
            if (DEBUG) {
                console.warn('Renderer > appendChild > asDOM > parent:', parent.toString(), 'node:', node.toString());
            }
            node.setRenderPendingCallback = this.rootRenderer.setRenderPendingCallback;
            this.rootRenderer.reactRootNodes.add(node);
            node.parent = parent;
            return;
        }
        if (DEBUG) {
            console.warn('Renderer > appendChild > asReact > parent:', parent.toString(), 'node:', node.toString());
        }
        node.setRenderPendingCallback = () => parent.setRenderPending();
        parent.addChild(node);
        node.parent = parent;
    }
    insertBefore(parent, node, refChild) {
        // Only insert a child if there is a parent.
        if (!parent) {
            return;
        }
        // Provide a parent element reference to the ReactNode.  This will be used later
        // once the ReactNode is fully defined and it is subsequently rendered.  In this
        // case, React cannot "insertBefore".  Instead, we have to create a target element
        // where the ReactNode can be rendered later.
        if (DEBUG) {
            console.warn('Renderer > insertBefore > asDOM > parent:', parent.toString(), 'node:', node.toString(), 'refChild:', refChild.toString());
        }
        const target = document.createElement('div');
        parent.insertBefore(target, refChild);
        node.parent = target;
        node.setRenderPendingCallback = this.rootRenderer.setRenderPendingCallback;
    }
    removeChild(parent, node) {
        // Only insert a child if there is a parent.
        if (!parent) {
            return;
        }
        // Remove a parent element reference from the ReactNode.  This will be later
        // result in the ReactNode unloading itself.
        if (!isReactNode(parent)) {
            if (DEBUG) {
                console.warn('Renderer > removeChild > asDOM > parent:', parent.toString(), 'node:', node.toString());
            }
            node.parent = null;
            return;
        }
        if (DEBUG) {
            console.warn('Renderer > removeChild > asReact > parent:', parent.toString(), 'node:', node.toString());
        }
        parent.removeChild(node);
    }
    selectRootElement(selectorOrNode) {
        if (DEBUG) {
            console.log('NOT IMPLEMENTED - Renderer > selectRootElement > selectorOrNode:', selectorOrNode);
        }
    }
    parentNode(node) {
        if (DEBUG) {
            console.log('NOT IMPLEMENTED - Renderer > parentNode > node:', node.toString());
        }
    }
    nextSibling(node) {
        if (DEBUG) {
            console.log('NOT IMPLEMENTED - Renderer > nextSibling > node:', node.toString());
        }
    }
    setAttribute(node, name, value, namespace) {
        if (DEBUG) {
            console.log('Renderer > setAttribute > node:', node.toString(), 'name:', name, 'value:', value, namespace ? 'namespace:' : '', namespace);
        }
        node.setProperty(name, value);
    }
    removeAttribute(node, name, namespace) {
        if (DEBUG) {
            console.log('Renderer > removeAttribute > node:', node.toString(), 'name:', name, namespace ? 'namespace:' : '', namespace);
        }
        node.removeProperty(name);
    }
    addClass(node, name) {
        if (DEBUG) {
            console.log('Renderer > addClass > node:', node.toString(), 'name:', name);
        }
        // Update the virtual node.
        // TODO: This may only support a single class name, but might work if property name is a single
        //       comma-delimited list of classes...
        node.setProperty('className', name);
    }
    removeClass(node, name) {
        if (DEBUG) {
            console.log('Renderer > removeClass > node:', node.toString(), 'name:', name);
        }
        // Update the virtual node.
        // TODO: This may not work correctly to remove a single name from a comma-delimited list.
        node.removeProperty('className');
    }
    setStyle(node, style, value, flags) {
        // if (DEBUG) { console.log('Renderer > setStyle > node: ', node.toString(), 'style:', style, 'value:', value, 'flags:', flags); }
        if (flags & RendererStyleFlags2.DashCase) {
            node.setProperty('style', { style: value + !!(flags & RendererStyleFlags2.Important) ? ' !important' : '' });
        }
        else {
            node.setProperty('style', { style: value });
        }
    }
    removeStyle(node, style, flags) {
        if (DEBUG) {
            console.log('Renderer > removeStyle > node:', node.toString(), 'style:', style, 'flags:', flags);
        }
        node.removeProperty('style', style);
    }
    setProperty(node, name, value) {
        if (DEBUG) {
            console.log('Renderer > setProperty > node:', node.toString(), 'name:', name, 'value:', value);
        }
        node.setProperty(name, value);
    }
    setValue(node, value) {
        if (DEBUG) {
            console.log('Renderer > setValue > node:', node.toString(), 'value:', value);
        }
        node.setProperty('value', value);
    }
    listen(target, event, callback) {
        if (DEBUG) {
            console.log('Renderer > listen > target:', target, 'event:', event);
        }
        target.setProperty(event, callback);
        // TODO: NEEDS WORK: Implement prevent default callback behavior.
        // return <() => void>this.eventManager.addEventListener(
        //            target, event, decoratePreventDefault(callback)) as() => void;
        // tslint:disable-next-line:no-unused-expression
        return () => null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvcmUvc3JjL2xpYi9yZW5kZXJlci9yZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw0REFBNEQ7QUFDNUQsa0NBQWtDO0FBRWxDLE9BQU8sRUFBRSxVQUFVLEVBQWEsbUJBQW1CLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBZ0Isb0JBQW9CLEVBQXdCLE1BQU0sMkJBQTJCLENBQUM7QUFFckcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzdDLE9BQU8scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0saUNBQWlDLENBQUM7OztBQUUxRSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUM7QUFHcEIsTUFBTSxPQUFPLDJCQUE0QixTQUFRLG9CQUFvQjtJQW9CbkUsWUFBWSxZQUEwQixFQUFFLGdCQUFzQztRQUM1RSxLQUFLLENBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBbEJsRCxvRUFBb0U7UUFDcEUsb0VBQW9FO1FBQ3BFLDBFQUEwRTtRQUMxRSxpRUFBaUU7UUFDakUsdUVBQXVFO1FBQ3ZFLGlGQUFpRjtRQUMxRSxtQkFBYyxHQUFtQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBSWxELHdFQUF3RTtRQUN4RSx1RUFBdUU7UUFDdkUsdUJBQXVCO1FBQ1AsNkJBQXdCLEdBQUcsR0FBRyxFQUFFO1lBQzlDLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzlCLENBQUMsQ0FB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SUFDaEMsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFlLEVBQUUsS0FBYTtRQUNyQyxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5RTtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBaUIsRUFBRSxLQUFhLEVBQUUsUUFBaUM7UUFDeEUsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDckU7UUFDRCxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVwQyxpRUFBaUU7UUFDakUseURBQXlEO1FBQ3pELDRFQUE0RTtRQUU1RSxnREFBZ0Q7UUFDaEQsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7SUFDcEIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuXHJcbmltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiwgUmVuZGVyZXJTdHlsZUZsYWdzMiwgUmVuZGVyZXJUeXBlMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIsIMm1RG9tUmVuZGVyZXJGYWN0b3J5MiwgybVEb21TaGFyZWRTdHlsZXNIb3N0IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IFN0cmluZ01hcCB9IGZyb20gJy4uL2RlY2xhcmF0aW9ucy9zdHJpbmctbWFwJztcclxuaW1wb3J0IHsgRGlzZ3Vpc2UgfSBmcm9tICcuL2NvbXBvbmVudHMvRGlzZ3Vpc2UnO1xyXG5pbXBvcnQgeyBSZWFjdENvbnRlbnQgfSBmcm9tICcuL3JlYWN0LWNvbnRlbnQnO1xyXG5pbXBvcnQgeyBpc1JlYWN0Tm9kZSwgUmVhY3ROb2RlIH0gZnJvbSAnLi9yZWFjdC1ub2RlJztcclxuaW1wb3J0IHsgcmVnaXN0ZXJFbGVtZW50IH0gZnJvbSAnLi9yZWdpc3RyeSc7XHJcbmltcG9ydCAnLi9nZXRldmVudGxpc3RlbmVycyc7XHJcbmltcG9ydCB7IGlzQW5ndWxhclJlYWN0Q29tcG9uZW50IH0gZnJvbSAnLi4vdXRpbHMvYW5ndWxhci1yZWFjdC9tZXRhZGF0YSc7XHJcblxyXG5jb25zdCBERUJVRyA9IGZhbHNlO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQW5ndWxhclJlYWN0UmVuZGVyZXJGYWN0b3J5IGV4dGVuZHMgybVEb21SZW5kZXJlckZhY3RvcnkyIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRSZWFjdFJlbmRlcmVyOiBSZWFjdFJlbmRlcmVyO1xyXG5cclxuICAvLyBDb2xsZWN0aW9uIG9mIFJlYWN0Tm9kZXMgdGhhdCBjYW4gYmUgZXZhbHVhdGVkIGFuZCBmbHVzaGVkIGF0IHRoZVxyXG4gIC8vIGVuZCBvZiBSZW5kZXIuICBUaGlzIGlzIG5lY2Vzc2FyeSBhcyB0aGUgZmxvdyBvZiBlbGVtZW50IGNyZWF0aW9uXHJcbiAgLy8gYW5kIHVwZGF0ZSBnb2VzIGZyb20gXCJjcmVhdGVcIiA+IFwiaW5zZXJ0XCIgPiBcInVwZGF0ZVwiIHByb3BlcnR5L2F0dHJpYnV0ZS5cclxuICAvLyBSZWFjdCBlbGVtZW50cyBjYW5ub3QgYmUgXCJpbnNlcnRlZFwiIGFuZCBsYXRlciBoYXZlIHRoZWlyIHByb3BzXHJcbiAgLy8gdXBkYXRlZCwgc28gdGhlIFwiaW5zZXJ0XCIsIG9yIFJlYWN0LlJlbmRlciwgY2FuIG9ubHkgYmUgZG9uZSBvbmNlIHRoZVxyXG4gIC8vIGVsZW1lbnQgaGFzIGJlZW4gZnVsbHkgZGVmaW5lZC4gIE9ubHkgdGhlIHRvcG1vc3QgW3Jvb3RdIG5vZGVzIGFyZSBhZGRlZCBoZXJlLlxyXG4gIHB1YmxpYyByZWFjdFJvb3ROb2RlczogU2V0PFJlYWN0Tm9kZT4gPSBuZXcgU2V0KCk7XHJcblxyXG4gIHByaXZhdGUgaXNSZW5kZXJQZW5kaW5nOiBib29sZWFuO1xyXG5cclxuICAvLyBUaGlzIGZsYWcgY2FuIG9ubHkgYmUgc2V0IHRvIHRydWUgZnJvbSBvdXRzaWRlLiAgSXQgY2FuIG9ubHkgYmUgcmVzZXRcclxuICAvLyB0byBmYWxzZSBmcm9tIGluc2lkZS4gIFRoaXMgdmFsdWUgaXMgcmVzZXQgb24gXCJlbmRcIiB3aGVuIHRoZSBwZW5kaW5nXHJcbiAgLy8gcmVuZGVycyBhcmUgZmx1c2hlZC5cclxuICBwdWJsaWMgcmVhZG9ubHkgc2V0UmVuZGVyUGVuZGluZ0NhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgdGhpcy5pc1JlbmRlclBlbmRpbmcgPSB0cnVlO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKGV2ZW50TWFuYWdlcjogRXZlbnRNYW5hZ2VyLCBzaGFyZWRTdHlsZXNIb3N0OiDJtURvbVNoYXJlZFN0eWxlc0hvc3QpIHtcclxuICAgIHN1cGVyKGV2ZW50TWFuYWdlciwgc2hhcmVkU3R5bGVzSG9zdCwgJ2FwcC1pZCcpO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tdXNlLWJlZm9yZS1kZWNsYXJlXHJcbiAgICB0aGlzLmRlZmF1bHRSZWFjdFJlbmRlcmVyID0gbmV3IFJlYWN0UmVuZGVyZXIodGhpcyk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVSZW5kZXJlcihlbGVtZW50OiBhbnksIHR5cGU6IFJlbmRlcmVyVHlwZTIgfCBudWxsKTogUmVuZGVyZXIyIHtcclxuICAgIGlmICh0eXBlLnN0eWxlcz8uWzBdID09PSAncmVhY3QtcmVuZGVyZXInIHx8IGlzQW5ndWxhclJlYWN0Q29tcG9uZW50KHR5cGUpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRSZWFjdFJlbmRlcmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdXBlci5jcmVhdGVSZW5kZXJlcihlbGVtZW50LCB0eXBlKTtcclxuICB9XHJcblxyXG4gIGJlZ2luKCkge31cclxuXHJcbiAgZW5kKCkge1xyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICdSb290UmVuZGVyZXIgPiBlbmQgPiBpc1JlbmRlclBlbmRpbmc6JyxcclxuICAgICAgICB0aGlzLmlzUmVuZGVyUGVuZGluZyxcclxuICAgICAgICAncmVhY3RSb290Tm9kZXM6JyxcclxuICAgICAgICB0aGlzLnJlYWN0Um9vdE5vZGVzXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmx1c2ggYW55IHBlbmRpbmcgUmVhY3QgZWxlbWVudCByZW5kZXIgdXBkYXRlcy4gIFRoaXMgY2Fubm90IGJlIGRvbmVcclxuICAgIC8vIGVhcmxpZXIgKGFzIGlzIGRvbmUgZm9yIERPTSBlbGVtZW50cykgYmVjYXVzZSBSZWFjdCBlbGVtZW50IHByb3BzXHJcbiAgICAvLyBhcmUgUmVhZE9ubHkuXHJcblxyXG4gICAgaWYgKHRoaXMuaXNSZW5kZXJQZW5kaW5nKSB7XHJcbiAgICAgIC8vIFJlbW92ZSByb290IG5vZGVzIHRoYXQgYXJlIHBlbmRpbmcgZGVzdHJveSBhZnRlciByZW5kZXIuXHJcbiAgICAgIHRoaXMucmVhY3RSb290Tm9kZXMgPSBuZXcgU2V0KEFycmF5LmZyb20odGhpcy5yZWFjdFJvb3ROb2RlcykuZmlsdGVyKG5vZGUgPT4gIW5vZGUucmVuZGVyKCkuZGVzdHJveVBlbmRpbmcpKTtcclxuICAgICAgdGhpcy5pc1JlbmRlclBlbmRpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpc1JlYWN0UmVuZGVyZXJEYXRhID0gKGRhdGE6IFN0cmluZ01hcCk6IGRhdGEgaXMgUmVhY3RSZW5kZXJlckRhdGEgPT5cclxuICBkYXRhICYmIHR5cGVvZiAoZGF0YSBhcyBSZWFjdFJlbmRlcmVyRGF0YSkuYWRkUm9vdE5vZGUgPT09ICdmdW5jdGlvbic7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlYWN0UmVuZGVyZXJEYXRhIHtcclxuICByZWFkb25seSBhZGRSb290Tm9kZTogKG5vZGU6IFJlYWN0Tm9kZSkgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJlYWN0UmVuZGVyZXIgaW1wbGVtZW50cyBSZW5kZXJlcjIge1xyXG4gIHJlYWRvbmx5IGRhdGE6IFJlYWN0UmVuZGVyZXJEYXRhID0ge1xyXG4gICAgYWRkUm9vdE5vZGU6IChub2RlOiBSZWFjdE5vZGUpID0+IHtcclxuICAgICAgdGhpcy5yb290UmVuZGVyZXIucmVhY3RSb290Tm9kZXMuYWRkKG5vZGUpO1xyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgcm9vdFJlbmRlcmVyOiBBbmd1bGFyUmVhY3RSZW5kZXJlckZhY3RvcnkpIHtcclxuICAgIC8vIFRoZXNlIHR3byBlbGVtZW50cyBhcmUgZXNzZW50aWFsIGZvciB0aGUgd2hvbGUgZXhwZXJpZW5jZSB0byBiZSBzbW9vdGggZm9yIHRoZSB1c2VyIC0gcmVnaXN0ZXIgdGhlbSBmcm9tIHRoZSBnZXQtZ28uXHJcbiAgICByZWdpc3RlckVsZW1lbnQoJ1JlYWN0Q29udGVudCcsICgpID0+IFJlYWN0Q29udGVudCk7XHJcbiAgICByZWdpc3RlckVsZW1lbnQoJ0Rpc2d1aXNlJywgKCkgPT4gRGlzZ3Vpc2UpO1xyXG4gIH1cclxuXHJcbiAgZGVzdHJveSgpOiB2b2lkIHt9XHJcblxyXG4gIGRlc3Ryb3lOb2RlKG5vZGU6IFJlYWN0Tm9kZSk6IHZvaWQge1xyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlbmRlcmVyID4gZGVzdHJveU5vZGUgPiBub2RlOicsIG5vZGUudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICBub2RlLmRlc3Ryb3lOb2RlKCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVFbGVtZW50KG5hbWU6IHN0cmluZywgbmFtZXNwYWNlPzogc3RyaW5nKTogUmVhY3ROb2RlIHtcclxuICAgIGlmIChERUJVRykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdSZW5kZXJlciA+IGNyZWF0ZUVsZW1lbnQgPiBuYW1lOicsIG5hbWUsIG5hbWVzcGFjZSA/ICduYW1lc3BhY2U6JyA6ICcnLCBuYW1lc3BhY2UpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBSZWFjdE5vZGUobmFtZSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDb21tZW50KHZhbHVlOiBzdHJpbmcpOiBSZWFjdE5vZGUge1xyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlbmRlcmVyID4gY3JlYXRlQ29tbWVudCA+IHZhbHVlOicsIHZhbHVlLnRyaW0oKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFJlYWN0Tm9kZSgpLmFzQ29tbWVudCh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVUZXh0KHZhbHVlOiBzdHJpbmcpOiBSZWFjdE5vZGUge1xyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1JlbmRlcmVyID4gY3JlYXRlVGV4dCA+IHZhbHVlOicsIHZhbHVlLnRyaW0oKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IFJlYWN0Tm9kZSgpLmFzVGV4dCh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBhcHBlbmRDaGlsZChwYXJlbnQ6IEhUTUxFbGVtZW50IHwgUmVhY3ROb2RlLCBub2RlOiBSZWFjdE5vZGUgfCBOb2RlKTogdm9pZCB7XHJcbiAgICAvLyBPbmx5IGFwcGVuZCBhIGNoaWxkIGlmIHRoZXJlIGlzIGEgY2hpbGQgdG8gYXBwZW5kLlxyXG4gICAgaWYgKCFub2RlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIE5vZGUpIHtcclxuICAgICAgaWYgKERFQlVHKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdSZW5kZXJlciA+IGFwcGVuZENoaWxkID4gYXNOb2RlID4gcGFyZW50OicsIHBhcmVudC50b1N0cmluZygpLCAnbm9kZTonLCBub2RlLnRvU3RyaW5nKCkpO1xyXG4gICAgICB9XHJcbiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChub2RlKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERvbid0IGFwcGVuZCBlbXB0eSB0ZXh0IG5vZGVzLlxyXG4gICAgaWYgKCFub2RlLnNob3VsZFJlbmRlcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJvdmlkZSBhIHBhcmVudCBlbGVtZW50IHJlZmVyZW5jZSB0byB0aGUgUmVhY3ROb2RlLiAgVGhpcyB3aWxsIGJlIHVzZWQgbGF0ZXJcclxuICAgIC8vIG9uY2UgdGhlIFJlYWN0Tm9kZSBpcyBmdWxseSBkZWZpbmVkIGFuZCBpdCBpcyBzdWJzZXF1ZW50bHkgcmVuZGVyZWQuXHJcbiAgICBpZiAoIWlzUmVhY3ROb2RlKHBhcmVudCkpIHtcclxuICAgICAgaWYgKERFQlVHKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdSZW5kZXJlciA+IGFwcGVuZENoaWxkID4gYXNET00gPiBwYXJlbnQ6JywgcGFyZW50LnRvU3RyaW5nKCksICdub2RlOicsIG5vZGUudG9TdHJpbmcoKSk7XHJcbiAgICAgIH1cclxuICAgICAgbm9kZS5zZXRSZW5kZXJQZW5kaW5nQ2FsbGJhY2sgPSB0aGlzLnJvb3RSZW5kZXJlci5zZXRSZW5kZXJQZW5kaW5nQ2FsbGJhY2s7XHJcblxyXG4gICAgICB0aGlzLnJvb3RSZW5kZXJlci5yZWFjdFJvb3ROb2Rlcy5hZGQobm9kZSk7XHJcbiAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignUmVuZGVyZXIgPiBhcHBlbmRDaGlsZCA+IGFzUmVhY3QgPiBwYXJlbnQ6JywgcGFyZW50LnRvU3RyaW5nKCksICdub2RlOicsIG5vZGUudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZS5zZXRSZW5kZXJQZW5kaW5nQ2FsbGJhY2sgPSAoKSA9PiBwYXJlbnQuc2V0UmVuZGVyUGVuZGluZygpO1xyXG4gICAgcGFyZW50LmFkZENoaWxkKG5vZGUpO1xyXG4gICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgfVxyXG5cclxuICBpbnNlcnRCZWZvcmUocGFyZW50OiBIVE1MRWxlbWVudCB8IHZvaWQsIG5vZGU6IFJlYWN0Tm9kZSwgcmVmQ2hpbGQ6IGFueSk6IHZvaWQge1xyXG4gICAgLy8gT25seSBpbnNlcnQgYSBjaGlsZCBpZiB0aGVyZSBpcyBhIHBhcmVudC5cclxuICAgIGlmICghcGFyZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQcm92aWRlIGEgcGFyZW50IGVsZW1lbnQgcmVmZXJlbmNlIHRvIHRoZSBSZWFjdE5vZGUuICBUaGlzIHdpbGwgYmUgdXNlZCBsYXRlclxyXG4gICAgLy8gb25jZSB0aGUgUmVhY3ROb2RlIGlzIGZ1bGx5IGRlZmluZWQgYW5kIGl0IGlzIHN1YnNlcXVlbnRseSByZW5kZXJlZC4gIEluIHRoaXNcclxuICAgIC8vIGNhc2UsIFJlYWN0IGNhbm5vdCBcImluc2VydEJlZm9yZVwiLiAgSW5zdGVhZCwgd2UgaGF2ZSB0byBjcmVhdGUgYSB0YXJnZXQgZWxlbWVudFxyXG4gICAgLy8gd2hlcmUgdGhlIFJlYWN0Tm9kZSBjYW4gYmUgcmVuZGVyZWQgbGF0ZXIuXHJcbiAgICBpZiAoREVCVUcpIHtcclxuICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICdSZW5kZXJlciA+IGluc2VydEJlZm9yZSA+IGFzRE9NID4gcGFyZW50OicsXHJcbiAgICAgICAgcGFyZW50LnRvU3RyaW5nKCksXHJcbiAgICAgICAgJ25vZGU6JyxcclxuICAgICAgICBub2RlLnRvU3RyaW5nKCksXHJcbiAgICAgICAgJ3JlZkNoaWxkOicsXHJcbiAgICAgICAgcmVmQ2hpbGQudG9TdHJpbmcoKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRhcmdldCwgcmVmQ2hpbGQpO1xyXG4gICAgbm9kZS5wYXJlbnQgPSB0YXJnZXQ7XHJcbiAgICBub2RlLnNldFJlbmRlclBlbmRpbmdDYWxsYmFjayA9IHRoaXMucm9vdFJlbmRlcmVyLnNldFJlbmRlclBlbmRpbmdDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHJlbW92ZUNoaWxkKHBhcmVudDogSFRNTEVsZW1lbnQgfCBSZWFjdE5vZGUgfCB2b2lkLCBub2RlOiBSZWFjdE5vZGUpOiB2b2lkIHtcclxuICAgIC8vIE9ubHkgaW5zZXJ0IGEgY2hpbGQgaWYgdGhlcmUgaXMgYSBwYXJlbnQuXHJcbiAgICBpZiAoIXBhcmVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIGEgcGFyZW50IGVsZW1lbnQgcmVmZXJlbmNlIGZyb20gdGhlIFJlYWN0Tm9kZS4gIFRoaXMgd2lsbCBiZSBsYXRlclxyXG4gICAgLy8gcmVzdWx0IGluIHRoZSBSZWFjdE5vZGUgdW5sb2FkaW5nIGl0c2VsZi5cclxuICAgIGlmICghaXNSZWFjdE5vZGUocGFyZW50KSkge1xyXG4gICAgICBpZiAoREVCVUcpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1JlbmRlcmVyID4gcmVtb3ZlQ2hpbGQgPiBhc0RPTSA+IHBhcmVudDonLCBwYXJlbnQudG9TdHJpbmcoKSwgJ25vZGU6Jywgbm9kZS50b1N0cmluZygpKTtcclxuICAgICAgfVxyXG4gICAgICBub2RlLnBhcmVudCA9IG51bGw7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoREVCVUcpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdSZW5kZXJlciA+IHJlbW92ZUNoaWxkID4gYXNSZWFjdCA+IHBhcmVudDonLCBwYXJlbnQudG9TdHJpbmcoKSwgJ25vZGU6Jywgbm9kZS50b1N0cmluZygpKTtcclxuICAgIH1cclxuICAgIHBhcmVudC5yZW1vdmVDaGlsZChub2RlKTtcclxuICB9XHJcblxyXG4gIHNlbGVjdFJvb3RFbGVtZW50KHNlbGVjdG9yT3JOb2RlOiBzdHJpbmcgfCBhbnkpOiBhbnkge1xyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdOT1QgSU1QTEVNRU5URUQgLSBSZW5kZXJlciA+IHNlbGVjdFJvb3RFbGVtZW50ID4gc2VsZWN0b3JPck5vZGU6Jywgc2VsZWN0b3JPck5vZGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcGFyZW50Tm9kZShub2RlOiBSZWFjdE5vZGUpOiBhbnkge1xyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdOT1QgSU1QTEVNRU5URUQgLSBSZW5kZXJlciA+IHBhcmVudE5vZGUgPiBub2RlOicsIG5vZGUudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZXh0U2libGluZyhub2RlOiBhbnkpOiBhbnkge1xyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdOT1QgSU1QTEVNRU5URUQgLSBSZW5kZXJlciA+IG5leHRTaWJsaW5nID4gbm9kZTonLCBub2RlLnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0QXR0cmlidXRlKG5vZGU6IFJlYWN0Tm9kZSwgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCBuYW1lc3BhY2U/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmIChERUJVRykge1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAnUmVuZGVyZXIgPiBzZXRBdHRyaWJ1dGUgPiBub2RlOicsXHJcbiAgICAgICAgbm9kZS50b1N0cmluZygpLFxyXG4gICAgICAgICduYW1lOicsXHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICAndmFsdWU6JyxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBuYW1lc3BhY2UgPyAnbmFtZXNwYWNlOicgOiAnJyxcclxuICAgICAgICBuYW1lc3BhY2VcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIG5vZGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQXR0cmlidXRlKG5vZGU6IFJlYWN0Tm9kZSwgbmFtZTogc3RyaW5nLCBuYW1lc3BhY2U/OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmIChERUJVRykge1xyXG4gICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAnUmVuZGVyZXIgPiByZW1vdmVBdHRyaWJ1dGUgPiBub2RlOicsXHJcbiAgICAgICAgbm9kZS50b1N0cmluZygpLFxyXG4gICAgICAgICduYW1lOicsXHJcbiAgICAgICAgbmFtZSxcclxuICAgICAgICBuYW1lc3BhY2UgPyAnbmFtZXNwYWNlOicgOiAnJyxcclxuICAgICAgICBuYW1lc3BhY2VcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIG5vZGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XHJcbiAgfVxyXG5cclxuICBhZGRDbGFzcyhub2RlOiBSZWFjdE5vZGUsIG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKERFQlVHKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdSZW5kZXJlciA+IGFkZENsYXNzID4gbm9kZTonLCBub2RlLnRvU3RyaW5nKCksICduYW1lOicsIG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgdmlydHVhbCBub2RlLlxyXG4gICAgLy8gVE9ETzogVGhpcyBtYXkgb25seSBzdXBwb3J0IGEgc2luZ2xlIGNsYXNzIG5hbWUsIGJ1dCBtaWdodCB3b3JrIGlmIHByb3BlcnR5IG5hbWUgaXMgYSBzaW5nbGVcclxuICAgIC8vICAgICAgIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIGNsYXNzZXMuLi5cclxuICAgIG5vZGUuc2V0UHJvcGVydHkoJ2NsYXNzTmFtZScsIG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlQ2xhc3Mobm9kZTogUmVhY3ROb2RlLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGlmIChERUJVRykge1xyXG4gICAgICBjb25zb2xlLmxvZygnUmVuZGVyZXIgPiByZW1vdmVDbGFzcyA+IG5vZGU6Jywgbm9kZS50b1N0cmluZygpLCAnbmFtZTonLCBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIHZpcnR1YWwgbm9kZS5cclxuICAgIC8vIFRPRE86IFRoaXMgbWF5IG5vdCB3b3JrIGNvcnJlY3RseSB0byByZW1vdmUgYSBzaW5nbGUgbmFtZSBmcm9tIGEgY29tbWEtZGVsaW1pdGVkIGxpc3QuXHJcbiAgICBub2RlLnJlbW92ZVByb3BlcnR5KCdjbGFzc05hbWUnKTtcclxuICB9XHJcblxyXG4gIHNldFN0eWxlKG5vZGU6IFJlYWN0Tm9kZSwgc3R5bGU6IHN0cmluZywgdmFsdWU6IGFueSwgZmxhZ3M6IFJlbmRlcmVyU3R5bGVGbGFnczIpOiB2b2lkIHtcclxuICAgIC8vIGlmIChERUJVRykgeyBjb25zb2xlLmxvZygnUmVuZGVyZXIgPiBzZXRTdHlsZSA+IG5vZGU6ICcsIG5vZGUudG9TdHJpbmcoKSwgJ3N0eWxlOicsIHN0eWxlLCAndmFsdWU6JywgdmFsdWUsICdmbGFnczonLCBmbGFncyk7IH1cclxuICAgIGlmIChmbGFncyAmIFJlbmRlcmVyU3R5bGVGbGFnczIuRGFzaENhc2UpIHtcclxuICAgICAgbm9kZS5zZXRQcm9wZXJ0eSgnc3R5bGUnLCB7IHN0eWxlOiB2YWx1ZSArICEhKGZsYWdzICYgUmVuZGVyZXJTdHlsZUZsYWdzMi5JbXBvcnRhbnQpID8gJyAhaW1wb3J0YW50JyA6ICcnIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbm9kZS5zZXRQcm9wZXJ0eSgnc3R5bGUnLCB7IHN0eWxlOiB2YWx1ZSB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZVN0eWxlKG5vZGU6IFJlYWN0Tm9kZSwgc3R5bGU6IHN0cmluZywgZmxhZ3M6IFJlbmRlcmVyU3R5bGVGbGFnczIpOiB2b2lkIHtcclxuICAgIGlmIChERUJVRykge1xyXG4gICAgICBjb25zb2xlLmxvZygnUmVuZGVyZXIgPiByZW1vdmVTdHlsZSA+IG5vZGU6Jywgbm9kZS50b1N0cmluZygpLCAnc3R5bGU6Jywgc3R5bGUsICdmbGFnczonLCBmbGFncyk7XHJcbiAgICB9XHJcbiAgICBub2RlLnJlbW92ZVByb3BlcnR5KCdzdHlsZScsIHN0eWxlKTtcclxuICB9XHJcblxyXG4gIHNldFByb3BlcnR5KG5vZGU6IFJlYWN0Tm9kZSwgbmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICBpZiAoREVCVUcpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1JlbmRlcmVyID4gc2V0UHJvcGVydHkgPiBub2RlOicsIG5vZGUudG9TdHJpbmcoKSwgJ25hbWU6JywgbmFtZSwgJ3ZhbHVlOicsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIG5vZGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWUobm9kZTogUmVhY3ROb2RlLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBpZiAoREVCVUcpIHtcclxuICAgICAgY29uc29sZS5sb2coJ1JlbmRlcmVyID4gc2V0VmFsdWUgPiBub2RlOicsIG5vZGUudG9TdHJpbmcoKSwgJ3ZhbHVlOicsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIG5vZGUuc2V0UHJvcGVydHkoJ3ZhbHVlJywgdmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgbGlzdGVuKHRhcmdldDogUmVhY3ROb2RlLCBldmVudDogc3RyaW5nLCBjYWxsYmFjazogKGV2ZW50OiBhbnkpID0+IGJvb2xlYW4pOiAoKSA9PiB2b2lkIHtcclxuICAgIGlmIChERUJVRykge1xyXG4gICAgICBjb25zb2xlLmxvZygnUmVuZGVyZXIgPiBsaXN0ZW4gPiB0YXJnZXQ6JywgdGFyZ2V0LCAnZXZlbnQ6JywgZXZlbnQpO1xyXG4gICAgfVxyXG4gICAgdGFyZ2V0LnNldFByb3BlcnR5KGV2ZW50LCBjYWxsYmFjayk7XHJcblxyXG4gICAgLy8gVE9ETzogTkVFRFMgV09SSzogSW1wbGVtZW50IHByZXZlbnQgZGVmYXVsdCBjYWxsYmFjayBiZWhhdmlvci5cclxuICAgIC8vIHJldHVybiA8KCkgPT4gdm9pZD50aGlzLmV2ZW50TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgLy8gICAgICAgICAgICB0YXJnZXQsIGV2ZW50LCBkZWNvcmF0ZVByZXZlbnREZWZhdWx0KGNhbGxiYWNrKSkgYXMoKSA9PiB2b2lkO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtZXhwcmVzc2lvblxyXG4gICAgcmV0dXJuICgpID0+IG51bGw7XHJcbiAgfVxyXG59XHJcbiJdfQ==