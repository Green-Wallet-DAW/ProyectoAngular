// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { getPassProps } from '../../renderer/pass-prop-decorator';
import removeUndefinedProperties from '../../utils/object/remove-undefined-properties';
import { ReactContent } from '../react-content';
/**
 * A React component that can render a component and its children as other component types.
 */
export class Disguise extends React.PureComponent {
    render() {
        const { disguiseRootAs, disguiseChildrenAs, children, ngChildComponents, ...rest } = this.props;
        const renderedChildren = ngChildComponents
            ? this._isReactContentOnlyChild()
                ? this._renderReactContentChildren()
                : this._renderChildrenNaive()
            : children;
        if (disguiseRootAs != null) {
            return React.createElement(disguiseRootAs, rest || null, renderedChildren);
        }
        else {
            return React.createElement(React.Fragment, rest.key != null ? { key: rest.key } : null, renderedChildren);
        }
    }
    _isReactContentOnlyChild() {
        const { children } = this.props;
        if (React.Children.count(children) === 1) {
            const [onlyChild] = React.Children.toArray(children);
            if (typeof onlyChild === 'object' && onlyChild.type === ReactContent) {
                return true;
            }
        }
        return false;
    }
    _renderReactContentChildren() {
        const { ngChildComponents, disguiseChildrenAs } = this.props;
        const renderedChildren = ngChildComponents.map((child, index) => {
            const propsToPass = removeUndefinedProperties(getPassProps(child).reduce((acc, passProp) => Object.assign(acc, { [passProp.targetKey]: child[passProp.sourceKey] }), {}));
            return React.createElement(disguiseChildrenAs, {
                ...propsToPass,
                key: index,
                ref: childReactElement => {
                    // ref callback is called with null when the component unmounts from the DOM, we don't need to handle it.
                    if (!childReactElement) {
                        return;
                    }
                    ReactDOM.findDOMNode(childReactElement).appendChild(child.elementRef.nativeElement);
                },
            });
        });
        return renderedChildren;
    }
    _renderChildrenNaive() {
        const { children, disguiseChildrenAs } = this.props;
        const renderedChildren = React.Children.map(children, child => {
            if (!disguiseChildrenAs || typeof child !== 'object') {
                return child;
            }
            const ChildRoot = child.type || disguiseChildrenAs;
            return React.createElement(ChildRoot, { ...child.props, key: child.key }, child);
        });
        return renderedChildren;
    }
}
//# sourceMappingURL=data:application/json;base64,